_printf()                          ALX Programmer's manual

NAME
       _printf

SYNOPSIS
       #include "main.h"

       int _printf(const char *format, ...);

DESCRIPTION
 The printf function writes the output under the control of a format string that specifies how subsequent arguments are converted for standard output.
 
  Format of the format string
       The format string is a character string,which is composed of zero or  more  directives:  ordinary  characters
       (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or 
       more subsequent arguments.  Each conversion specification is introduced by the character %, and ends with the conversion specifier.

       It is expected that the arguments correspond properly (after type promotion) with the conversion specifier.  By default, the arguments are used
       in the order given, and each conversion specifier asks for the next argument. An error occurs if insufficiently many arguments are given.
       One  can  also  specify  explicitly which  argument is taken.

       For  some numeric conversions a radix character ("decimal point") or thousands' grouping character is used.  The actual character used depends on the LC_NUMERIC part of the locale.
       (See setlocale(3).)  The POSIX locale uses '.' as radix character, and does not have a grouping character.  Thus,

               _printf("%'.2f", 1234567.89);

 Conversion characters
       The character % is followed by zero or more of the following flags:

       d, i   The int argument is converted to signed decimal notation.The precision, if any, gives the minimum number of digits
              that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.  The default
              precision is 1.  When 0 is printed with an explicit precision 0, the output is empty.
       c      The argument is converted to an unsigned char, and the resulting character is written.  If an l modifier is present, the wint_t (wide                 character) argument is converted to a multibyte sequence
              by a call to the wcrtomb(3) function, with a conversion state starting in the initial state, and the resulting
              multibyte string is written.
       s      The const char * argument is expected to be a pointer to an array of character type(pointer to a string). Characters from the array are
              written up to (but not including) a terminating null byte('\0')
       %      A '%' is written.  No argument is converted.  The complete conversion specification is '%%'
       
Usage example:
       _printf("%d commits done by %s. %d contributions form engineer %c", 25, Gideon, 30, Y);
       
       output:
       25 commits by Gideon. 30 contributions from engineer D       

Author:
       David Mutinda
       Gideon Osoro
